<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>郭栋的博客 – 深入理解Istio</title>
    <link>/docs/istio/understanding/</link>
    <description>Recent content in 深入理解Istio on 郭栋的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 05 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/docs/istio/understanding/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 流量管理</title>
      <link>/docs/istio/understanding/traffic/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/istio/understanding/traffic/</guid>
      <description>
        
        
        &lt;p&gt;Istio中对流量管理的两个基本的CRD对象是VirtualService和DestinationRule。下面通过一个例子来简要说明一下这两种对象的作用。&lt;/p&gt;
&lt;p&gt;假设有一个服务webservice，包含了一些pod，这些pod分成两组，其中一部分pod带有app:v1的label，而另一部分pod带有app:v2的label。这两个label代表了这个服务的两个不同的版本。&lt;/p&gt;
&lt;p&gt;我们的预期目标是将一部分流量(用户名为userA)导流到v2版本的负载，而其它流量导流到v1版本。&lt;/p&gt;
&lt;p&gt;首先，需要使用DestinationRule来区分这些不同的pod集合，在Istio中被称为subset。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name:
spec:
  host: webservice
  subsets:
  - name: v1subset
    labels:
      app: v1
  - name: v2subset
    labels:
      app: v2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来需要定义一个VirtualService对象来将流量路由到对应的负载上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: myvirtualservice
spec:
  hosts:
  - webservice
  http:
  - match:
    - headers:
        end-user:
          exact: userA
    route:
    - destination:
        host: webservice
        subset: v2subset
  - route:
    - destination:
        host: webservice
        subset: v1subset
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此，可以大概看出VirtualService和DestinationRule的基本作用：&lt;/p&gt;
&lt;p&gt;DestinationRule定义了后端负载的subset。而VirtualService则是定义流量如何被路由到指定的subset。&lt;/p&gt;
&lt;p&gt;除了这些基本功能之外VirtualService和DestinationRule还定义了一些其特性，比如上例中VirtualService使用的是基于http协议的路由配置，除此之外还可以使用tcp的或者tls协议的路由配置。DestinationRule还可以定义后端负载的策略，默认的是轮询，也可以配置成最小连接数、随机等等策略，还可以设置tls相关的配置，具体可以参考官方手册。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 安全机制</title>
      <link>/docs/istio/understanding/security/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/istio/understanding/security/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;./security_1.png&#34; alt=&#34;security_1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Istio内部实现了认证和授权这两种基本的安全机制。认证的含义是来识别对方是不是一个合法的对象，常用的认证包括使用用户名和密码进行认证、使用证书进行认证等等。而授权则是在认证的基础上来进一步确认对方有没有执行某种操作的权限，例如这个用户只有读取某个对象的权限而没有写入的权限，这时授权系统就会放行用户对这种对象的读操作、也会拒绝这个用户对这种对象的写操作。&lt;/p&gt;
&lt;p&gt;Istio中的认证包括两种类型：双向tls(mtls)认证和对终端用户的认证。&lt;/p&gt;
&lt;p&gt;双向tls认证是指实际的源pod的Envoy与目的pod的Envoy之间的基于证书的认证，也就是说客户端和服务器端都要对对方的证书进行验证，以便确认对方是可信的、而不是由第三方伪造的。&lt;/p&gt;
&lt;p&gt;对终端用户的认证是指对发出请求的主体进行验证，验证的对象是源Pod而不是源Pod对应的Envoy Proxy，也被称为对请求的认证，即request authentication。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
