<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>郭栋的博客 – 安全机制</title>
    <link>/docs/istio/understanding/security/</link>
    <description>Recent content in 安全机制 on 郭栋的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 05 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/docs/istio/understanding/security/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 双向tls认证</title>
      <link>/docs/istio/understanding/security/mtls/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/istio/understanding/security/mtls/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;../mtls_1.png&#34; alt=&#34;mtls_1&#34;&gt;&lt;/p&gt;
&lt;p&gt;双向tls的认证，是指两个Envoy Proxy之间的认证。Pod A需要访问Pod B，在Istio中，请求都是由Envoy进行代理的，因此完整的流程是Pod A发出到Pod B的请求，然后请求会被Envoy Proxy A劫持，接着Envoy Proxy A会与Envoy Proxy B进行点对点的认证，认证通过后，请求会由Envoy Proxy A发送给Envoy Proxy B，最后再由Envoy Proxy B将请求转发给Pod B。&lt;/p&gt;
&lt;p&gt;在Envoy Proxy A与Envoy Proxy B之间认证的过程对于Pod A或者Pod B而言都是无感知的。&lt;/p&gt;
&lt;p&gt;Istio中双向tls认证的基本对象是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;认证配置的策略类型-&#34;&gt;认证配置的策略类型&lt;/h2&gt;
&lt;p&gt;在具体进行配置的时候，有四种基本的策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DISABLE&lt;/p&gt;
&lt;p&gt;即禁用双向tls认证，这种情况下源Envoy与目的Envoy之间没有对对方进行身份的安全确认，它们之间发送的都是明文数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STRICT&lt;/p&gt;
&lt;p&gt;即严格的双向tls认证模式。源Envoy与目的Envoy之间必须对对方进行身份的安全确认，它们之间发送的都是加密后的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PERMISSIVE&lt;/p&gt;
&lt;p&gt;可以进行双向tls认证、也可以不进行认证从而发送明文数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UNSET&lt;/p&gt;
&lt;p&gt;即没有进行设置，这种情况下会继承上级策略，比如当前namespace的或者整个系统的。如果上级策略都为空，则会默认设置为PERMISSIVE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;认证配置的范围-&#34;&gt;认证配置的范围&lt;/h2&gt;
&lt;p&gt;Istio中对双向tls认证进行配置的时候，可以有几种不同的范围，范围越小优先级越高：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;全局&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: istio-system
spec:
  mtls:
    mode: STRICT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，全局的安全策略名称只能是default，namespace则是istio所在的系统namespace，这里是istio-system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;namespace级别，即某个namespace中所有服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: foo
spec:
  mtls:
    mode: PERMISSIVE
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负载级别，即某个namespace中某些具体的Pod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: foo
spec:
  selector:
    matchLabels:
      app: finance
  mtls:
    mode: STRICT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会将带有&amp;quot;app: finance&amp;quot;label的Pod所在的Envoy实行STRICT模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;端口级别&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: foo
spec:
  selector:
    matchLabels:
      app: finance
  mtls:
    mode: STRICT
  portLevelMtls:
    8080:
      mode: DISABLE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会将带有&amp;quot;app: finance&amp;quot;label的Pod所在的Envoy实行STRICT模式，但是会将其中的8080端口使用DISABLE模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;认证配置的具体方法-&#34;&gt;认证配置的具体方法&lt;/h2&gt;
&lt;p&gt;在Istio中进行双向tls认证配置，需要注意的是客户端和服务器端配置方法是不一样的。例如在namespace foo中有两组服务A和B，每组都有一些Pod，假设服务A的Pod对应的label为&amp;quot;app: A&amp;rdquo;，而服务B的Pod对应的label为&amp;quot;app: B&amp;rdquo;。这时在服务A所在的Pod中访问服务B，要将这一请求设置为STRICT模式，需要配置两处&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;服务器端配置，给服务B对应的负载配置PeerAuthentication策略，这里配置的是服务B所有关联Pod对应的Envoy Proxy。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: foo
spec:
  selector:
    matchLabels:
      app: B
  mtls:
    mode: STRICT
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端配置，给服务B配置DestinationRule策略。这里配置的是所有访问服务B的Pod对应的Envoy Proxy。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -n foo -f -
apiVersion: &amp;quot;networking.istio.io/v1alpha3&amp;quot;
kind: &amp;quot;DestinationRule&amp;quot;
metadata:
  name: &amp;quot;B&amp;quot;
spec:
  host: &amp;quot;B.foo.svc.cluster.local&amp;quot;
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也就是说客户端配置的时候需要配置目的服务的DestinationRule对象，而服务器端配置的时候需要配置服务器端对应负载的PeerAuthentication对象。&lt;/p&gt;
&lt;h2 id=&#34;测试case1-默认配置-&#34;&gt;测试case1 默认配置&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;kubectl create ns foo
kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/httpbin/httpbin.yaml) -n foo
kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/sleep/sleep.yaml) -n foo
kubectl create ns bar
kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/httpbin/httpbin.yaml) -n bar
kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/sleep/sleep.yaml) -n bar
kubectl create ns legacy
kubectl apply -f samples/httpbin/httpbin.yaml -n legacy
kubectl apply -f samples/sleep/sleep.yaml -n legacy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建了3个namespace：foo, bar和legacy，每个namespace分别创建了sleep和httpbin两种应用，作为客户端和服务器端。在foo和bar中的Pod有对应的Envoy Proxy，而在legacy中则没有。下面是创建成功后的Pod情况&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master1 istio-1.6.0]# kubectl get pod --all-namespaces
NAMESPACE      NAME                                    READY   STATUS    RESTARTS   AGE
bar            httpbin-67576779c-tjl4m                 2/2     Running   0          31m
bar            sleep-7dc44b8d45-rfhpl                  2/2     Running   0          31m
foo            httpbin-67576779c-tw6kl                 2/2     Running   0          31m
foo            sleep-7dc44b8d45-87x2p                  2/2     Running   0          31m
legacy         httpbin-779c54bf49-h5wrw                1/1     Running   0          31m
legacy         sleep-f8cbf5b76-b8xgd                   1/1     Running   0          31m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在使用默认的default配置部署Istio的情况下，如果没有设置任何安全策略，默认是PERMISSIVE，即同时允许双向tls认证和不进行任何认证的纯文本数据交换两种方式。注意这只针对有Envoy Proxy的情况，因为这些策略最终的执行者是Envoy，而对于那些没有Envoy Proxy的Pod，例如legacy中的Pod，则只能使用纯文本方式进行收发数据。下面来验证这一点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master1 istio-1.6.0]# for from in &amp;quot;foo&amp;quot; &amp;quot;bar&amp;quot; &amp;quot;legacy&amp;quot;; do for to in &amp;quot;foo&amp;quot; &amp;quot;bar&amp;quot; &amp;quot;legacy&amp;quot;; do kubectl exec $(kubectl get pod -l app=sleep -n ${from} -o jsonpath={.items..metadata.name}) -c sleep -n ${from} -- curl &amp;quot;http://httpbin.${to}:8000/ip&amp;quot; -s -o /dev/null -w &amp;quot;sleep.${from} to httpbin.${to}: %{http_code}\n&amp;quot;; done; done
sleep.foo to httpbin.foo: 200
sleep.foo to httpbin.bar: 200
sleep.foo to httpbin.legacy: 200
sleep.bar to httpbin.foo: 200
sleep.bar to httpbin.bar: 200
sleep.bar to httpbin.legacy: 200
sleep.legacy to httpbin.foo: 200
sleep.legacy to httpbin.bar: 200
sleep.legacy to httpbin.legacy: 200
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到任何两个sleep与httpbin之间都是可以连通的。但是如果进一步观察，发现这些认证方式其实是不同的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master1 istio-1.6.0]# kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl http://httpbin.foo:8000/headers -s | grep X-Forwarded-Client-Cert
    &amp;quot;X-Forwarded-Client-Cert&amp;quot;: &amp;quot;By=spiffe://cluster.local/ns/foo/sa/httpbin;Hash=41eb8aa0a91782fc1a09df8da85b586c5eaabbca3117f645cdb9df8d998b55f2;Subject=\&amp;quot;\&amp;quot;;URI=spiffe://cluster.local/ns/foo/sa/sleep&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从foo中的sleep访问foo中的httpbin，header中带有&amp;quot;X-Forwarded-Client-Cert&amp;quot;表明使用了双向tls认证。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master1 istio-1.6.0]# kubectl exec $(kubectl get pod -l app=sleep -n legacy -o jsonpath={.items..metadata.name}) -c sleep -n legacy -- curl http://httpbin.foo:8000/headers -s | grep X-Forwarded-Client-Cert
[root@master1 istio-1.6.0]#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而从legacy中的sleep访问legacy中的httpbin，header中则不会带有&amp;quot;X-Forwarded-Client-Cert&amp;rdquo;，因为客户端和服务器端都没有Envoy Proxy，只能进行没有任何认证的纯文本数据交换的方式。&lt;/p&gt;
&lt;p&gt;另外，还可以看出sleep.legacy发出去的请求都是纯文本类型，而sleep.httpbin收到的请求也都是纯文本类型。而foo和bar里面的Pod发送请求时则会优先使用双向tls认证方式(即下面四种)，这些可以自行测试验证。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sleep.foo to httpbin.foo: 200
sleep.foo to httpbin.bar: 200
sleep.bar to httpbin.foo: 200
sleep.bar to httpbin.bar: 200
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;清理命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl delete -f &amp;lt;(istioctl kube-inject -f samples/httpbin/httpbin.yaml) -n foo
kubectl delete -f &amp;lt;(istioctl kube-inject -f samples/sleep/sleep.yaml) -n foo
kubectl delete -f samples/httpbin/httpbin.yaml -n legacy
kubectl delete -f samples/sleep/sleep.yaml -n legacy
kubectl delete -f &amp;lt;(istioctl kube-inject -f samples/httpbin/httpbin.yaml) -n bar
kubectl delete -f &amp;lt;(istioctl kube-inject -f samples/sleep/sleep.yaml) -n bar
kubectl delete ns foo
kubectl delete ns legacy
kubectl delete ns bar
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;测试case2-针对特定服务的配置-&#34;&gt;测试case2 针对特定服务的配置&lt;/h2&gt;
&lt;p&gt;首先，创建一个全局的安全策略，禁用所有的双向tls认证。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: &amp;quot;security.istio.io/v1beta1&amp;quot;
kind: &amp;quot;PeerAuthentication&amp;quot;
metadata:
  name: &amp;quot;default&amp;quot;
  namespace: &amp;quot;istio-system&amp;quot;
spec:
  mtls:
    mode: DISABLE
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后创建一个foo namespace，并在其中创建带有Envoy Proxy的sleep和httpbin&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl create ns foo
kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/httpbin/httpbin.yaml) -n foo
kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/sleep/sleep.yaml) -n foo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时进行测试，会发现他们之间可以正常访问，但没有使用双向tls认证，这符合预期，说明全局策略生效。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[root@master1 istio-1.6.0]# kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl &amp;quot;http://httpbin.foo:8000/ip&amp;quot; -s -o /dev/null -w &amp;quot;sleep.foo to httpbin.foo: %{http_code}\n&amp;quot;
sleep.foo to httpbin.foo: 200
[root@master1 istio-1.6.0]# kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl http://httpbin.foo:8000/headers -s | grep X-Forwarded-Client-Cert
[root@master1 istio-1.6.0]#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来为服务器端配置PeerAuthentication策略，让其强制执行双向tls认证&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -n foo -f -
apiVersion: &amp;quot;security.istio.io/v1beta1&amp;quot;
kind: &amp;quot;PeerAuthentication&amp;quot;
metadata:
  name: &amp;quot;httpbin&amp;quot;
  namespace: &amp;quot;foo&amp;quot;
spec:
  selector:
    matchLabels:
      app: httpbin
  mtls:
    mode: STRICT
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时再次进行测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master1 istio-1.6.0]# kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl &amp;quot;http://httpbin.foo:8000/ip&amp;quot; -s -o /dev/null -w &amp;quot;sleep.foo to httpbin.foo: %{http_code}\n&amp;quot;
sleep.foo to httpbin.foo: 503
[root@master1 istio-1.6.0]#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出现了503错误，这其实是一个tls冲突，因为截至目前为止我们为服务器端设置了强制使用双向tls认证，但是客户端还未设置。&lt;/p&gt;
&lt;p&gt;接下来设置客户端。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -n foo -f -
apiVersion: &amp;quot;networking.istio.io/v1alpha3&amp;quot;
kind: &amp;quot;DestinationRule&amp;quot;
metadata:
  name: &amp;quot;httpbin&amp;quot;
spec:
  host: &amp;quot;httpbin.foo.svc.cluster.local&amp;quot;
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后进行测试，发现现在已经可以正常访问，且使用了双向tls认证，符合预期。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master1 istio-1.6.0]# kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl &amp;quot;http://httpbin.foo:8000/ip&amp;quot; -s -o /dev/null -w &amp;quot;sleep.foo to httpbin.foo: %{http_code}\n&amp;quot;
sleep.foo to httpbin.foo: 200
[root@master1 istio-1.6.0]# kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl http://httpbin.foo:8000/headers -s | grep X-Forwarded-Client-Cert
    &amp;quot;X-Forwarded-Client-Cert&amp;quot;: &amp;quot;By=spiffe://cluster.local/ns/foo/sa/httpbin;Hash=b8a73b2655b270e23eda820e49c56cc9b16521d98cb6c1896eff41c58cc32d56;Subject=\&amp;quot;\&amp;quot;;URI=spiffe://cluster.local/ns/foo/sa/sleep&amp;quot;
[root@master1 istio-1.6.0]#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;清理命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl delete PeerAuthentication httpbin -n foo
kubectl delete DestinationRule httpbin -n foo
kubectl delete -f &amp;lt;(istioctl kube-inject -f samples/httpbin/httpbin.yaml) -n foo
kubectl delete -f &amp;lt;(istioctl kube-inject -f samples/sleep/sleep.yaml) -n foo
kubectl delete ns foo
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考-&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/docs/concepts/security/&#34;&gt;https://istio.io/docs/concepts/security/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/docs/tasks/security/authentication/&#34;&gt;https://istio.io/docs/tasks/security/authentication/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/docs/reference/config/security/peer_authentication/&#34;&gt;https://istio.io/docs/reference/config/security/peer_authentication/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/docs/reference/config/networking/destination-rule&#34;&gt;https://istio.io/docs/reference/config/networking/destination-rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhaohuabing.com/post/2020-05-25-istio-certificate/&#34;&gt;https://zhaohuabing.com/post/2020-05-25-istio-certificate/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 对终端用户的认证</title>
      <link>/docs/istio/understanding/security/enduser_authentication/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/istio/understanding/security/enduser_authentication/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;../enduser_authentication_1.png&#34; alt=&#34;enduser_authentication_1&#34;&gt;&lt;/p&gt;
&lt;p&gt;对终端用户的认证是指对于发出请求的用户进行认证，当Pod A需要访问Pod B时，在Pod A内部发出到Pod B的请求，这个请求本身携带了某种Token(例如JWT)，然后请求会被Envoy Proxy A劫持，接着请求会由Envoy Proxy A发送给Envoy Proxy B，这时Envoy Proxy B会根据配置对请求中的Token进行验证，如果验证通过，则Envoy Proxy B会将请求转发给Pod B；如果Token认证失败，则请求被拒绝，不会发送给Pod B。&lt;/p&gt;
&lt;p&gt;Istio中终端用户认证的基本对象是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: &amp;quot;security.istio.io/v1beta1&amp;quot;
kind: &amp;quot;RequestAuthentication&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;测试case1-对ingress进行配置-&#34;&gt;测试case1 对ingress进行配置&lt;/h2&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h2 id=&#34;测试case1-对sidecar进行配置-&#34;&gt;测试case1 对sidecar进行配置&lt;/h2&gt;
&lt;p&gt;TODO&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 授权</title>
      <link>/docs/istio/understanding/security/authorization/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/istio/understanding/security/authorization/</guid>
      <description>
        
        
        &lt;p&gt;注：本文最早发表于 &lt;a href=&#34;https://github.com/servicemesher/istio-handbook&#34;&gt;Istio Handbook——Istio 服务网格进阶实战&lt;/a&gt; 一书中 ，著作权归属于 ServiceMesher 社区。&lt;/p&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;授权功能是 Istio 中安全体系的一个重要组成部分，它用来实现访问控制的功能，即判断一个请求是否允许通过，这个请求可以是从外部进入 Istio 内部的请求，也可以是在 Istio 内部从服务 A 到服务 B 的请求。可以把授权功能近似地认为是一种四层到七层的“防火墙”，它会像传统防火墙一样，对数据流进行分析和匹配，然后执行相应的动作。&lt;/p&gt;
&lt;p&gt;本节所有概念和操作都基于 Istio 1.6 版本。&lt;/p&gt;
&lt;p&gt;授权功能是通过授权策略 (AuthorizationPolicy) 来进行配置和使用的，下面是一个完整的授权策略示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;security.istio.io/v1beta1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;AuthorizationPolicy&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;httpbin-policy&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;foo&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;httpbin&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;ALLOW&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rules&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;principals&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cluster.local/ns/default/sa/sleep&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;paths&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/info*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;request.auth.claims&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;iss&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;https://foo.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个授权策略的含义是：筛选出 &lt;code&gt;foo&lt;/code&gt; 这个 namespace 中含有 &lt;code&gt;app: httpbin&lt;/code&gt; label 的 pod，对发送到这些 pod 的请求进行匹配，如果匹配成功，则放行当前请求，匹配规则如下：发起请求的 pod 的 Service Account 需要是 &lt;code&gt;cluster.local/ns/default/sa/sleep&lt;/code&gt; ，请求使用 HTTP 协议，请求的具体方法类型是 &lt;code&gt;GET&lt;/code&gt; ，请求的URL为 &lt;code&gt;/info*&lt;/code&gt; ，并且请求中需要包含由 &lt;code&gt;https://foo.com&lt;/code&gt; 签发的有效的 JWT Token。&lt;/p&gt;
&lt;p&gt;从这个例子中可以看出一个授权策略主要包含以下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;。授权策略的名称，仅用于标识授权策略本身，不会影响规则的匹配和执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namespace&lt;/strong&gt;。当前授权策略对象所在的 namespace ，可以使用这个字段配置不同作用范围的授权策略，详见 &lt;a href=&#34;#%E6%8E%88%E6%9D%83%E7%AD%96%E7%95%A5%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4&#34;&gt;授权策略的作用范围&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;selector&lt;/strong&gt;。使用 label 来选择当前授权策略作用于哪些 pod 上。注意，这里设置的是服务端的 pod ，因为最终这些规则会转换成 Envoy 规则由服务端的 Envoy Proxy 来具体执行。例如有 client 和 server 两个 service ，它们的 pod 对应的 label 分别为 &lt;code&gt;app: client&lt;/code&gt; 和 &lt;code&gt;app: server&lt;/code&gt; ，为了针对从 client 到 server 的请求进行配置授权策略，这里的 selector 应该设置为 &lt;code&gt;app: server&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;action&lt;/strong&gt;。可以为 &lt;code&gt;ALLOW&lt;/code&gt; (默认值)或者 &lt;code&gt;DENY&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rules&lt;/strong&gt;。匹配规则，如果匹配成功，就会执行对应的 action ，详见 &lt;a href=&#34;#%E6%8E%88%E6%9D%83%E7%AD%96%E7%95%A5%E7%9A%84%E8%A7%84%E5%88%99%E8%AF%A6%E8%A7%A3&#34;&gt;授权策略的规则详解&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;授权策略的作用范围&#34;&gt;授权策略的作用范围&lt;/h2&gt;
&lt;p&gt;授权策略可以按照作用域的大小分成三个不同的类型：全局策略、某个 namespace 内的局部策略和具有明确 match label 的授权策略。下面分别进行说明。&lt;/p&gt;
&lt;h3 id=&#34;全局策略&#34;&gt;全局策略&lt;/h3&gt;
&lt;p&gt;授权策略位于 istio 的 root namespace 中(例如 &lt;code&gt;istio-system&lt;/code&gt; )，且匹配所有的 pod。这种规则会作用于整个集群中的所有 pod。&lt;/p&gt;
&lt;p&gt;下面的例子中有3个全局策略，第一个是全局 &lt;code&gt;ALLOW&lt;/code&gt; ，第二个和第三个是全局 &lt;code&gt;DENY&lt;/code&gt; ，后面这两个作用类似，但又有重要的区别，详见 &lt;a href=&#34;#%E6%8E%88%E6%9D%83%E7%AD%96%E7%95%A5%E7%9A%84%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95&#34;&gt;授权策略的匹配算法&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: global-allow
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: istio-system
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  action: ALLOW
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - {}
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;

kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: global-deny
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: istio-system
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  action: DENY
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - {}
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;

kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: global-deny
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: istio-system
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  {}
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;某个-namespace-内的局部策略&#34;&gt;某个 namespace 内的局部策略&lt;/h3&gt;
&lt;p&gt;授权策略位于除了 root namespace 之外的任何一个 namespace 中，且匹配所有的 pod ，这种情况下，这个策略会作用于当前 namespace 中的所有 pod。&lt;/p&gt;
&lt;p&gt;下面的例子中是3个 namespace 级别的策略，第一个是 &lt;code&gt;ALLOW&lt;/code&gt; ，第二个和第三个是 &lt;code&gt;DENY&lt;/code&gt; ，像全局策略一样，后面这两个作用类似，但又有重要的区别，详见 &lt;a href=&#34;#%E6%8E%88%E6%9D%83%E7%AD%96%E7%95%A5%E7%9A%84%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95&#34;&gt;授权策略的匹配算法&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: foo-namespace-allow
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: foo
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  action: ALLOW
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - {}
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;

kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: foo-namespace-deny
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: foo
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  action: DENY
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - {}
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;

kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: foo-namespace-deny
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: foo
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  {}
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;具有明确-match-label-的授权策略&#34;&gt;具有明确 match label 的授权策略&lt;/h3&gt;
&lt;p&gt;这种授权策略仅作用于当前 namespace 下使用 &lt;code&gt;selector&lt;/code&gt; 字段匹配到的 pod。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: httpbin-allow
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: foo
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;      app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  action: ALLOW
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - {}
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;授权策略的匹配算法&#34;&gt;授权策略的匹配算法&lt;/h2&gt;
&lt;p&gt;针对某一个请求，会按照一定的匹配算法来执行相应的授权策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果有任何一条 &lt;code&gt;DENY&lt;/code&gt; 授权策略匹配当前请求，则拒绝当前请求。&lt;/li&gt;
&lt;li&gt;针对当前 pod，如果没有任何 &lt;code&gt;ALLOW&lt;/code&gt; 授权策略，则放行当前请求。&lt;/li&gt;
&lt;li&gt;如果有任何一条 &lt;code&gt;ALLOW&lt;/code&gt; 授权策略匹配当前请求，则放行当前请求。&lt;/li&gt;
&lt;li&gt;拒绝当前请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也就意味着，如果同时有 &lt;code&gt;ALLOW&lt;/code&gt; 和 &lt;code&gt;DENY&lt;/code&gt; 策略作用于同一个 pod 上，则 &lt;code&gt;DENY&lt;/code&gt; 策略会优先执行，其它的 &lt;code&gt;ALLOW&lt;/code&gt; 规则就会被忽略。&lt;/p&gt;
&lt;p&gt;注意这个顺序非常重要，有时又会比较隐晦，因此在配置比较复杂策略的时候需要多加小心。&lt;/p&gt;
&lt;p&gt;在上文 &lt;a href=&#34;#%E6%8E%88%E6%9D%83%E7%AD%96%E7%95%A5%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4&#34;&gt;授权策略的作用范围&lt;/a&gt; 中提到授权策略在配置时，有一些细节上的差异，现结合授权策略的匹配算法进行一些分析。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;{}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个 &lt;code&gt;DENY&lt;/code&gt; 策略，作用于全局策略或者 namespace 级别(取决于策略所在 namespace 是否为 root namespace )。但是它并没有对当前请求进行匹配，也就意味着按照授权策略的匹配算法在匹配的时候并不会优先匹配到这条规则，因此可以将其作为一个“后备”策略，即全局或者 namespaces 级别的一个默认策略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;DENY&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rules&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- {}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这条规则会真正地匹配当前的请求，又由于它是 &lt;code&gt;DENY&lt;/code&gt; 规则，按照授权策略的匹配算法，它会首先得到执行，也就意味着如果配置了一条这种全局或者 namespace 级别的规则，那么所有的其它 &lt;code&gt;ALLOW&lt;/code&gt; 规则都不会得到执行。因此这条规则在实际中并没有什么价值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;ALLOW&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rules&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- {}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这条规则和上一条规则类似，但是它是 &lt;code&gt;ALLOW&lt;/code&gt; 规则，因此按照授权策略的匹配算法，它的优先级会低一些，因此也可以像第一条规则一样作为一个全局或者 namespace 级别的默认策略。&lt;/p&gt;
&lt;h2 id=&#34;授权策略的规则详解&#34;&gt;授权策略的规则详解&lt;/h2&gt;
&lt;p&gt;授权策略中最重要的是其中的 &lt;code&gt;rule&lt;/code&gt; 字段，它指定了如何针对当前的请求进行匹配。如果一个授权策略中指定了多条 &lt;code&gt;rule&lt;/code&gt; 规则，则它们之间是&lt;code&gt;或&lt;/code&gt;的关系，即只要其中任意一条规则匹配成功，那么整个授权策略匹配成功，就会执行相应的 action ，下面是 &lt;a href=&#34;#%E6%A6%82%E8%BF%B0&#34;&gt;概述&lt;/a&gt; 中提到的一个授权策略的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;security.istio.io/v1beta1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;AuthorizationPolicy&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;httpbin-policy&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;foo&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;httpbin&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;ALLOW&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rules&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;principals&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cluster.local/ns/default/sa/sleep&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operation&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;paths&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/info*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;when&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;request.auth.claims&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;iss&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;https://foo.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;rules&lt;/code&gt; 是一个 &lt;code&gt;rule&lt;/code&gt; 的列表。每一条 &lt;code&gt;rule&lt;/code&gt; 规则包括三部分： from 、 to 和 when 。类似于防火墙规则， from 和 to 匹配当前请求从哪里来、到哪里去， when 会增加一些额外的检测，当这些条件都满足时，就会认为当前规则匹配成功。如果其中某一部分未进行配置，则认为其可以匹配成功。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;rule&lt;/code&gt; 中进行配置时，所有的字符串类型都支持类似于通配符的匹配模式，例如 &lt;code&gt;abc*&lt;/code&gt; 匹配 &amp;ldquo;abc&amp;rdquo; 和 &amp;ldquo;abcd&amp;rdquo; 等， &lt;code&gt;*xyz&lt;/code&gt; 匹配 &amp;ldquo;xyz&amp;rdquo; 和 &amp;ldquo;axyz&amp;rdquo; 等，单独的 &lt;code&gt;*&lt;/code&gt; 匹配非空的字符串。&lt;/p&gt;
&lt;p&gt;下面针对具体的字段详细进行说明。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;from&lt;/strong&gt;。针对请求的发送方进行匹配，主要包括 principals 、 requestPrincipals 、 namespaces 和 ipBlocks 四个部分。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;principals&lt;/strong&gt;。匹配发送方的身份，在 Kubernetes 中可以认为是 pod 的 Service Account。使用这个字段时，首先需要开启 mTLS 功能。例如，当前请求是从 default namespace 中的 pod 中发出，且 pod 使用的 Service Account 名为 &lt;code&gt;sleep&lt;/code&gt; ，针对这个请求进行匹配，可将 principals 配置为[&lt;code&gt;cluster.local/ns/default/sa/sleep&lt;/code&gt;]。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;requestPrincipals&lt;/strong&gt;。匹配请求中的 JWT Token 的 &lt;code&gt;&amp;lt;issuer&amp;gt;/&amp;lt;subject&amp;gt;&lt;/code&gt; 字段组合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namespaces&lt;/strong&gt;。匹配发送方 pod 所在的 namespace。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ipBlocks&lt;/strong&gt;。匹配请求的源 IP 地址段。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;to&lt;/strong&gt;。针对请求的接收方进行匹配。除了请求接收方，还会对请求本身进行匹配。包括以下字段：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hosts&lt;/strong&gt;。目的 host。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ports&lt;/strong&gt;。目的 port。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;methods&lt;/strong&gt;。是指当前请求执行的 HTTP Method 。针对 gRPC 服务，这个字段需要设置为 &lt;code&gt;POST&lt;/code&gt;。注意这个字段必须在 HTTP 协议时才进行匹配，如果不是请求不是 HTTP 协议，则认为匹配失败。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;paths&lt;/strong&gt;。当前请求执行的 HTTP URL Path 。针对 gRPC 服务，需要配置为 &lt;code&gt;/package.service/method&lt;/code&gt; 格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;when&lt;/strong&gt;。这是一个 key/value 格式的 list 。这个字段会针对请求进行一些额外的检测，当这些检测全部匹配时才会认证当前规则匹配成功。例如 &lt;code&gt;key: request.headers[User-Agent]&lt;/code&gt; 可以匹配 HTTP Header 中的 &lt;code&gt;User-Agent&lt;/code&gt; 字段。所有可配置项可参见 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/conditions/&#34;&gt;Authorization Policy Conditions&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对以上字段，还有对应的反向匹配操作，即“取反”匹配，包括 notPrincipals 、 notNamespaces 等。例如 &lt;code&gt;notNamespaces: [&amp;quot;bar&amp;quot;]&lt;/code&gt; 表示当发送请求的 pod 不位于 &amp;ldquo;bar&amp;rdquo; 这个 namespace 中的时候匹配成功。&lt;/p&gt;
&lt;p&gt;下面针对上文列出来的授权策略给出一些实际的例子，一方面可以在实际环境中是如何使用这些策略的，另一方面也可以验证前文所述的各种匹配字段、授权策略的匹配算法和授权策略的作用域。&lt;/p&gt;
&lt;h2 id=&#34;操作示例&#34;&gt;操作示例&lt;/h2&gt;
&lt;h3 id=&#34;创建应用&#34;&gt;创建应用&lt;/h3&gt;
&lt;p&gt;首先，创建客户端和服务器端的 service 和对应的 pod，使用的例子位于 istio 源代码中 &lt;a href=&#34;https://github.com/istio/istio/tree/master/samples&#34;&gt;samples&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl create ns foo
$ kubectl apply -f &amp;lt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;istioctl kube-inject -f samples/httpbin/httpbin.yaml&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; -n foo
$ kubectl apply -f &amp;lt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;istioctl kube-inject -f samples/sleep/sleep.yaml&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; -n foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;确认 pod 已正常运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod -n foo --show-labels
NAME                       READY   STATUS    RESTARTS   AGE   LABELS
httpbin-5d5df46d48-jndgh   2/2     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          57s   &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;httpbin,istio.io/rev&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;,pod-template-hash&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;5d5df46d48,security.istio.io/tlsMode&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;isti
o,version&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;v1
sleep-545684d78b-29x74     2/2     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          56s   &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep,istio.io/rev&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;,pod-template-hash&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;545684d78b,security.istio.io/tlsMode&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;istio
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;确认可以正常访问，且启用了 mTLS 功能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep -n foo -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; -c sleep -n foo -- curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://httpbin.foo:8000/ip&amp;#34;&lt;/span&gt; -s -o /dev/null -w &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sleep.foo to httpbin.foo: %{http_code}\n&amp;#34;&lt;/span&gt;
sleep.foo to httpbin.foo: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;200&lt;/span&gt;
$
$ kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep -n foo -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; -c sleep -n foo -- curl http://httpbin.foo:8000/headers -s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; grep X-Forwarded-Client-Cert
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X-Forwarded-Client-Cert&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;By=spiffe://cluster.local/ns/foo/sa/httpbin;Hash=e0f2132eb6ae920cec4b2ea16b9baa33ca388b719a2648636f7a75542852ff0e;Subject=\&amp;#34;\&amp;#34;;URI=spiffe://cluster.local/ns/foo/sa/sleep&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;全局策略测试&#34;&gt;全局策略测试&lt;/h3&gt;
&lt;p&gt;接下来创建一个全局默认的拒绝策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: global-deny
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: istio-system
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  {}
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时再进行验证连通性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep -n foo -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; -c sleep -n foo -- curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://httpbin.foo:8000/ip&amp;#34;&lt;/span&gt; -s -o /dev/null -w &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sleep.foo to httpbin.foo: %{http_code}\n&amp;#34;&lt;/span&gt;
sleep.foo to httpbin.foo: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;403&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务拒绝，表明全局拒绝策略生效。&lt;/p&gt;
&lt;p&gt;接下来创建一个 httpbin pod 的 &lt;code&gt;ALLOW&lt;/code&gt; 策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: httpbin-allow-policy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: foo
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;      app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  action: ALLOW
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - to:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    - operation:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        methods: [&amp;#34;GET&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;按照授权策略的匹配算法，应该可以匹配到第3条规则，因此会执行 &lt;code&gt;ALLOW&lt;/code&gt; 动作，运行下面的命令进行验证：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep -n foo -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; -c sleep -n foo -- curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://httpbin.foo:8000/ip&amp;#34;&lt;/span&gt; -s -o /dev/null -w &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sleep.foo to httpbin.foo: %{http_code}\n&amp;#34;&lt;/span&gt;
sleep.foo to httpbin.foo: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;测试rule中的字段&#34;&gt;测试Rule中的字段&lt;/h3&gt;
&lt;p&gt;下面我们以 Service Account 为例来进行说明。首先来检查 sleep pod 所使用的的 Service Account：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep -n foo -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.items...serviceAccountName&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
sleep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据 namespace 和 Service Account 构造出 principals 字段，更新授权策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: httpbin-allow-policy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: foo
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;      app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  action: ALLOW
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - from:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    - source:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        principals: [&amp;#34;cluster.local/ns/foo/sa/sleep&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    to:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    - operation:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        methods: [&amp;#34;GET&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进行验证：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep -n foo -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; -c sleep -n foo -- curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://httpbin.foo:8000/ip&amp;#34;&lt;/span&gt; -s -o /dev/null -w &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sleep.foo to httpbin.foo: %{http_code}\n&amp;#34;&lt;/span&gt;
sleep.foo to httpbin.foo: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问仍然是放行状态，说明刚才的授权策略是生效的。&lt;/p&gt;
&lt;p&gt;将授权策略中的 Service Account 改为一个其它值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: httpbin-allow-policy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: foo
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;      app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  action: ALLOW
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - from:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    - source:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        principals: [&amp;#34;cluster.local/ns/foo/sa/other-sa&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    to:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    - operation:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        methods: [&amp;#34;GET&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep -n foo -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; -c sleep -n foo -- curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://httpbin.foo:8000/ip&amp;#34;&lt;/span&gt; -s -o /dev/null -w &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sleep.foo to httpbin.foo: %{http_code}\n&amp;#34;&lt;/span&gt;
sleep.foo to httpbin.foo: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;403&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问失败，因为授权策略中配置 Service Account 字段与实际的 Service Account 不匹配。&lt;/p&gt;
&lt;p&gt;同样地，可以配置 From 、 To 和 When 中的其它字段进行测试。&lt;/p&gt;
&lt;h3 id=&#34;授权策略的匹配算法测试&#34;&gt;授权策略的匹配算法测试&lt;/h3&gt;
&lt;p&gt;首先，删除之前创建的名为 httpbin-allow-policy 的授权策略，目前系统中仅存在一个全局的默认 &lt;code&gt;DENY&lt;/code&gt; 策略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl delete authorizationpolicies httpbin-allow-policy -n foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来创建一个匹配 &amp;ldquo;GET&amp;rdquo; 方法的 &lt;code&gt;ALLOW&lt;/code&gt; 策略，名为 httpbin-allow-get：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: httpbin-allow-get
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: foo
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;      app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  action: ALLOW
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - to:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    - operation:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        methods: [&amp;#34;GET&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时使用 &amp;ldquo;GET /ip&amp;rdquo; 请求进行测试，由于可以和 httpbin-allow-get 策略匹配，因此按照授权策略的匹配算法，可以匹配到第3条规则，因此可以正常访问：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep -n foo -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; -c sleep -n foo -- curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://httpbin.foo:8000/ip&amp;#34;&lt;/span&gt; -s -o /dev/null -w &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sleep.foo to httpbin.foo: %{http_code}\n&amp;#34;&lt;/span&gt;
sleep.foo to httpbin.foo: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &amp;ldquo;POST /ip&amp;rdquo; 请求进行测试，与 httpbin-allow-get 策略不能匹配，因此会执默认的全局 &lt;code&gt;DENY&lt;/code&gt; 策略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep -n foo -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; -c sleep -n foo -- curl -X POST &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://httpbin.foo:8000/ip&amp;#34;&lt;/span&gt; -s -o /dev/null -w &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sleep.foo to httpbin.foo: %{http_code}\n&amp;#34;&lt;/span&gt;
sleep.foo to httpbin.foo: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;403&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再创建一个 &amp;ldquo;/ip&amp;rdquo; 的 &lt;code&gt;DENY&lt;/code&gt; 策略，名为 httpbin-deny-ip-url：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  name: httpbin-deny-ip-url
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  namespace: foo
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;      app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  action: DENY
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  - to:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    - operation:
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        paths: [&amp;#34;/ip&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时使用 &amp;ldquo;GET /ip&amp;rdquo; 请求进行测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;kubectl get pod -l &lt;span style=&#34;color:#000&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sleep -n foo -o &lt;span style=&#34;color:#000&#34;&gt;jsonpath&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;={&lt;/span&gt;.items..metadata.name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt; -c sleep -n foo -- curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://httpbin.foo:8000/ip&amp;#34;&lt;/span&gt; -s -o /dev/null -w &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sleep.foo to httpbin.foo: %{http_code}\n&amp;#34;&lt;/span&gt;
sleep.foo to httpbin.foo: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;403&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看出执行失败。失败的原因是 &amp;ldquo;GET /ip&amp;rdquo; 请求与我们刚才创建的 httpbin-allow-get 和 httpbin-deny-ip-url 两个授权策略都会匹配，但是授权策略的匹配算法执行到第1条规则时，会发现匹配 httpbin-deny-ip-url 授权策略，然后就会直接拒绝当前的请求。另一条授权策略 httpbin-allow-get 便无法得到执行。&lt;/p&gt;
&lt;h3 id=&#34;清理&#34;&gt;清理&lt;/h3&gt;
&lt;p&gt;执行以下操作来清理我们创建过的各种资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl delete authorizationpolicies httpbin-deny-ip-url -n foo
$ kubectl delete authorizationpolicies httpbin-allow-get -n foo
$ kubectl delete authorizationpolicies httpbin-allow-policy -n foo
$ kubectl delete authorizationpolicies global-deny -n istio-system
$ kubectl delete -f &amp;lt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;istioctl kube-inject -f samples/httpbin/httpbin.yaml&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; -n foo
$ kubectl delete -f &amp;lt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;istioctl kube-inject -f samples/sleep/sleep.yaml&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; -n foo
$ kubectl delete ns foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本节我们详细分析了授权策略的概念和用法，也可以看出利用这些规则可以组合出非常复杂的场景，因此在使用复杂的授权策略时需要非常小心。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/authorization-policy/&#34;&gt;Authorization Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/conditions/&#34;&gt;Authorization Policy Conditions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/tasks/security/authorization/&#34;&gt;Authorization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: </title>
      <link>/docs/istio/understanding/security/_enduser_authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/istio/understanding/security/_enduser_authentication/</guid>
      <description>
        
        
        &lt;h2 id=&#34;测试case1-对sidecar进行配置-&#34;&gt;测试case1 对sidecar进行配置&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;kubectl create ns foo
kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/httpbin/httpbin.yaml) -n foo
kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/sleep/sleep.yaml) -n foo

kubectl delete -f &amp;lt;(istioctl kube-inject -f samples/httpbin/httpbin.yaml) -n foo
kubectl delete -f &amp;lt;(istioctl kube-inject -f samples/sleep/sleep.yaml) -n foo
kubectl delete ns foo


kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: &amp;quot;security.istio.io/v1beta1&amp;quot;
kind: &amp;quot;RequestAuthentication&amp;quot;
metadata:
  name: &amp;quot;jwt-example&amp;quot;
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: httpbin
  jwtRules:
  - issuer: &amp;quot;testing@secure.istio.io&amp;quot;
    jwksUri: &amp;quot;https://raw.githubusercontent.com/istio/istio/release-1.6/security/tools/jwt/samples/jwks.json&amp;quot;
EOF

kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl &amp;quot;http://httpbin.foo:8000/headers&amp;quot; -s -o /dev/null -w &amp;quot;%{http_code}\n&amp;quot;

kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl --header &amp;quot;Authorization: Bearer xxxxxx&amp;quot; &amp;quot;http://httpbin.foo:8000/headers&amp;quot; -s -o /dev/null -w &amp;quot;%{http_code}\n&amp;quot;

TOKEN=$(curl https://raw.githubusercontent.com/istio/istio/release-1.6/security/tools/jwt/samples/demo.jwt -s)

kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl --header &amp;quot;Authorization: Bearer $TOKEN&amp;quot; &amp;quot;http://httpbin.foo:8000/headers&amp;quot; -s -o /dev/null -w &amp;quot;%{http_code}\n&amp;quot;

kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: httpbin
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
  rules:
  - from:
    - source:
        requestPrincipals: [&amp;quot;*&amp;quot;]
EOF
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
  </channel>
</rss>
